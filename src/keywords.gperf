// clang-format off
%{
#include "prims.h"
#include "thunks.h"

typedef struct Keyword
{
  const char *name;
  Cell *cell;
} Keyword;

%}

%enum
%includes
%global-table
%struct-type
%ignore-case
%define word-array-name keyword_table
%define constants-prefix GPERF_
%define slot-name name

struct Keyword;
%%
"nil",     NIL
"t",       T
"quote",   QUOTE
"'",       QUOTE
"and",     &thunk_cells[THUNK_AND]
"append",  &thunk_cells[THUNK_APPEND]
"apply",   &thunk_cells[THUNK_APPLY]
"butlast", &thunk_cells[THUNK_BUTLAST]
"car",     &thunk_cells[THUNK_CAR]
"cdr",     &thunk_cells[THUNK_CDR]
"cons",    &thunk_cells[THUNK_CONS]
"define",  &thunk_cells[THUNK_DEFINE]
"eq",      &thunk_cells[THUNK_EQ]
"eval",    &thunk_cells[THUNK_EVAL]
"first",   &thunk_cells[THUNK_FIRST]
"funcall", &thunk_cells[THUNK_FUNCALL]
"gt",      &thunk_cells[THUNK_GT]
">",       &thunk_cells[THUNK_GT]
"if",      &thunk_cells[THUNK_IF]
"last",    &thunk_cells[THUNK_LAST]
"length",  &thunk_cells[THUNK_LENGTH]
"let",     &thunk_cells[THUNK_LET]
"lt",      &thunk_cells[THUNK_LT]
"<",       &thunk_cells[THUNK_LT]
"map",     &thunk_cells[THUNK_MAP]
"nth",     &thunk_cells[THUNK_NTH]
"not",     &thunk_cells[THUNK_NOT]
"list",    &thunk_cells[THUNK_LIST]
"or",      &thunk_cells[THUNK_OR]
"print",   &thunk_cells[THUNK_PRINT]
"progn",   &thunk_cells[THUNK_PROGN]
"rest",    &thunk_cells[THUNK_REST]
"reverse", &thunk_cells[THUNK_REVERSE]
"set!",    &thunk_cells[THUNK_SET]
"string",  &thunk_cells[THUNK_STRING]
"add",     &thunk_cells[THUNK_ADD]
"+",       &thunk_cells[THUNK_ADD]
"sub",     &thunk_cells[THUNK_SUB]
"-",       &thunk_cells[THUNK_SUB]
"mul",     &thunk_cells[THUNK_MUL]
"*",       &thunk_cells[THUNK_MUL]
"div",     &thunk_cells[THUNK_DIV]
"/",       &thunk_cells[THUNK_DIV]
%%


struct Cell *
keyword_lookup (const char *str, size_t len)
{
  Keyword *keyword = in_word_set(str, len);

  if (!keyword)
    return NULL;

  return keyword->cell;
}

const char *
is_keyword_strncmp (const char *text, int state)
{
  static int idx;
  static size_t len;

  if (state == 0)
    {
      idx = 0;
      len = strlen (text);
    }

  while (idx < GPERF_TOTAL_KEYWORDS)
    {
      const char *name = keyword_table[idx++].name;
      if (!strncasecmp (name, text, len))
        return name;
    }

  return NULL;
}
