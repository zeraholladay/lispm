// clang-format off
%{
#include <string.h>

#include "eval.h"
#include "eval_bool.h"
#include "eval_math.h"
#include "keywords.h"

#define AS_SYM(name) { .str   = name, .len = sizeof(name) - 1      }

static BuiltinFn builtin_and      = { .name = "AND",     .is_lispm = 1, .arity = -1, .fn = NULL            };
static BuiltinFn builtin_append   = { .name = "APPEND",  .is_lispm = 0, .arity = -1, .fn = eval_append     };
static BuiltinFn builtin_apply    = { .name = "APPLY",   .is_lispm = 1, .arity = -1, .fn = NULL            };
static BuiltinFn builtin_butlast  = { .name = "BUTLAST", .is_lispm = 0, .arity =  1, .fn = eval_butlast    };
static BuiltinFn builtin_car      = { .name = "CAR",     .is_lispm = 0, .arity =  1, .fn = eval_car        };
static BuiltinFn builtin_cdr      = { .name = "CDR",     .is_lispm = 0, .arity =  1, .fn = eval_cdr        };
static BuiltinFn builtin_cons     = { .name = "CONS",    .is_lispm = 0, .arity =  2, .fn = eval_cons       };
static BuiltinFn builtin_eq       = { .name = "EQ",      .is_lispm = 0, .arity =  2, .fn = eval_eq         };
static BuiltinFn builtin_eval     = { .name = "EVAL",    .is_lispm = 1, .arity =  1, .fn = NULL            };
static BuiltinFn builtin_progn    = { .name = "PROGN",   .is_lispm = 1, .arity = -1, .fn = NULL            };
static BuiltinFn builtin_first    = { .name = "FIRST",   .is_lispm = 0, .arity =  1, .fn = eval_car        };
static BuiltinFn builtin_funcall  = { .name = "FUNCALL", .is_lispm = 1, .arity = -1, .fn = NULL            };
static BuiltinFn builtin_gt       = { .name = "GT",      .is_lispm = 0, .arity = -1, .fn = eval_gt         };
static BuiltinFn builtin_if       = { .name = "IF",      .is_lispm = 1, .arity = -1, .fn = NULL            };
static BuiltinFn builtin_length   = { .name = "LENGTH",  .is_lispm = 0, .arity =  1, .fn = eval_length     };
static BuiltinFn builtin_last     = { .name = "LAST",    .is_lispm = 0, .arity =  1, .fn = eval_last       };
static BuiltinFn builtin_mapcar   = { .name = "MAPCAR",  .is_lispm = 0, .arity = -1, .fn = eval_mapcar     };
static BuiltinFn builtin_lt       = { .name = "LT",      .is_lispm = 0, .arity = -1, .fn = eval_lt         };
static BuiltinFn builtin_nth      = { .name = "NTH",     .is_lispm = 0, .arity =  2, .fn = eval_nth        };
static BuiltinFn builtin_not      = { .name = "NOT",     .is_lispm = 0, .arity =  1, .fn = eval_not        };
static BuiltinFn builtin_list     = { .name = "LIST",    .is_lispm = 1, .arity = -1, .fn = NULL            };
static BuiltinFn builtin_or       = { .name = "OR",      .is_lispm = 1, .arity = -1, .fn = NULL            };
static BuiltinFn builtin_print    = { .name = "PRINT",   .is_lispm = 0, .arity =  1, .fn = eval_print      };
static BuiltinFn builtin_rest     = { .name = "REST",    .is_lispm = 0, .arity =  1, .fn = eval_cdr        };
static BuiltinFn builtin_reverse  = { .name = "REVERSE", .is_lispm = 0, .arity =  1, .fn = eval_reverse    };
static BuiltinFn builtin_set      = { .name = "SET",     .is_lispm = 0, .arity =  2, .fn = eval_set        };
static BuiltinFn builtin_str      = { .name = "STRING",  .is_lispm = 0, .arity =  1, .fn = eval_string     };
static BuiltinFn builtin_add      = { .name = "ADD",     .is_lispm = 0, .arity = -1, .fn = eval_add        };
static BuiltinFn builtin_sub      = { .name = "SUB",     .is_lispm = 0, .arity = -1, .fn = eval_sub        };
static BuiltinFn builtin_mul      = { .name = "MUL",     .is_lispm = 0, .arity = -1, .fn = eval_mul        };
static BuiltinFn builtin_div      = { .name = "DIV",     .is_lispm = 0, .arity = -1, .fn = eval_div        };
%}

%includes
%global-table
%define word-array-name keyword_table
%struct-type
%ignore-case
%define initializer-suffix ,{0}
%define slot-name name

struct Keyword;

%%
NIL,     { .type = TYPE_NIL,        .cons       = { .car = NULL, .cdr = NULL }},
T,       { .type = TYPE_SYMBOL,     .symbol     = AS_SYM("T")       },
QUOTE,   { .type = TYPE_SYMBOL,     .symbol     = AS_SYM("QUOTE")   },
',       { .type = TYPE_SYMBOL,     .symbol     = AS_SYM("'")       },
LAMBDA,  { .type = TYPE_SYMBOL,     .symbol     = AS_SYM("LAMBDA")  },
AND,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_and      },
APPEND,  { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_append   },
APPLY,   { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_apply    },
BUTLAST, { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_butlast  },
CAR,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_car      },
CDR,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_cdr      },
CONS,    { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_cons     },
EQ,      { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_eq       },
EVAL,    { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_eval     },
FIRST,   { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_first    },
FUNCALL, { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_funcall  },
GT,      { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_gt       },
>,       { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_gt       },
IF,      { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_if       },
LAST,    { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_last     },
LENGTH,  { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_length   },
LT,      { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_lt       },
<,       { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_lt       },
MAPCAR,  { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_mapcar   },
NTH,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_nth      },
NOT,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_not      },
LIST,    { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_list     },
OR,      { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_or       },
PRINT,   { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_print    },
PROGN,   { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_progn    },
REST,    { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_rest     },
REVERSE, { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_reverse  },
SET,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_set      },
STRING,  { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_str      },
ADD,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_add      },
SUB,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_sub      },
MUL,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_mul      },
DIV,     { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_div      },
+,       { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_add      },
-,       { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_sub      },
*,       { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_mul      },
/,       { .type = TYPE_BUILTIN_FN, .builtin_fn = &builtin_div      },
%%

#define PRIN_FN_TAB_NUM                                                       \
  ((int)(sizeof (keyword_table) / sizeof (keyword_table[0])))

struct Cell *
keyword_lookup (const char *str, size_t len)
{
  Keyword *keyword = in_word_set(str, len);
  if (keyword)
    {
      return &keyword->cell;
    }
  else
    {
      return NULL;
    }
}

const char *
is_keyword_strncmp (const char *text, int state)
{
  static int idx;
  static size_t len;

  if (state == 0)
    {
      idx = 0;
      len = strlen (text);
    }

  while (idx < PRIN_FN_TAB_NUM)
    {
      const char *name = keyword_table[idx++].name;
      if (!strncasecmp (name, text, len))
        {
          return name;
        }
    }
  return NULL;
}
